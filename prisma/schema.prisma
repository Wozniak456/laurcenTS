generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model calculation_table {
  id                  Int       @id @default(autoincrement())
  day                 Int
  date                DateTime  @db.Date
  fish_amount_in_pool Int
  general_weight      Float
  fish_weight         Float
  feed_quantity       Float
  v_c                 Float?
  total_weight        Float?
  weight_per_fish     Float?
  feed_today          Float?
  feed_per_day        Float
  feed_per_feeding    Float
  doc_id              BigInt
  transition_day      Int?
  documents           documents @relation(fields: [doc_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model doctype {
  id          Int         @id @unique
  name        String      @unique @db.VarChar
  description String?
  documents   documents[]
}

model documents {
  id                     BigInt                   @id @default(autoincrement())
  location_id            Int
  doc_type_id            Int
  date_time              DateTime                 @default(now()) @db.Timestamp(6)
  executed_by            Int
  comments               String?
  parent_document        BigInt?
  date_time_posted       DateTime                 @default(now()) @db.Timestamp(6)
  calculation_table      calculation_table[]
  disposal_table         disposal_table[]
  doctype                doctype                  @relation(fields: [doc_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employees              employees                @relation(fields: [executed_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  generation_feed_amount generation_feed_amount[]
  itemtransactions       itemtransactions[]
  stocking               stocking[]
  locations              locations[]              @relation("documentsTolocations")

  @@index([date_time, doc_type_id], map: "idx_documents_date_doc_type")
  @@index([doc_type_id, date_time], map: "idx_documents_doc_type_date")
}

model employeepositions {
  id          Int         @id @default(autoincrement())
  name        String      @unique @db.VarChar
  description String?
  employees   employees[]
}

model employees {
  id                                                                    Int                       @id @default(autoincrement())
  empl_position_id                                                      Int?
  date_from                                                             DateTime?                 @db.Timestamp(6)
  date_to                                                               DateTime?                 @db.Timestamp(6)
  individual_id                                                         Int
  documents                                                             documents[]
  employeepositions                                                     employeepositions?        @relation(fields: [empl_position_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  individual                                                            individuals               @relation(fields: [individual_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  itembatches                                                           itembatches[]
  percent_feeding_history_percent_feeding_history_created_byToemployees percent_feeding_history[] @relation("percent_feeding_history_created_byToemployees")
  percent_feeding_history_percent_feeding_history_updated_byToemployees percent_feeding_history[] @relation("percent_feeding_history_updated_byToemployees")
  priority_history_priority_history_created_byToemployees               priority_history[]        @relation("priority_history_created_byToemployees")
  priority_history_priority_history_updated_byToemployees               priority_history[]        @relation("priority_history_updated_byToemployees")
}

model feedconnections {
  id               Int         @id @default(autoincrement())
  fish_id          Int
  from_fish_weight Float
  to_fish_weight   Float
  feedtypes        feedtypes[]
}

model individuals {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar
  surname     String      @db.VarChar
  itn         String?     @db.VarChar(10)
  description String?
  employees   employees[]

  @@unique([name, surname], map: "uq_name_surname")
}

model itembatches {
  id                     BigInt                   @id @default(autoincrement())
  name                   String                   @unique @db.VarChar
  description            String?
  item_id                Int
  created                DateTime?                @default(now()) @db.Timestamp(6)
  created_by             Int
  expiration_date        DateTime?
  packing                Float?
  price                  Float?
  batch_generation       batch_generation[]
  disposal_table         disposal_table[]
  generation_feed_amount generation_feed_amount[]
  employees              employees                @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  items                  items                    @relation(fields: [item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  itemtransactions       itemtransactions[]
}

model items {
  id               Int                @id @default(autoincrement())
  name             String             @unique @db.VarChar
  description      String?
  item_type_id     Int?
  default_unit_id  Int?
  parent_item      Int?
  feed_type_id     Int?
  vendor_id        Int?
  itembatches      itembatches[]
  units            units?             @relation(fields: [default_unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  feedtypes        feedtypes?         @relation(fields: [feed_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  itemtypes        itemtypes?         @relation(fields: [item_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vendors          vendors?           @relation(fields: [vendor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  priority_history priority_history[]
  purchaselines    purchaselines[]
  saleslines       saleslines[]
}

model itemtransactions {
  id                 BigInt             @id @default(autoincrement())
  doc_id             BigInt
  location_id        Int
  batch_id           BigInt
  quantity           Float
  unit_id            Int
  parent_transaction BigInt?
  status_id          Int                @default(3)
  batch_generation   batch_generation[]
  fetching           fetching[]
  itembatches        itembatches        @relation(fields: [batch_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  documents          documents          @relation(fields: [doc_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  locations          locations          @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transactionsstate  transactionsstate  @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  units              units              @relation(fields: [unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  purchaselines      purchaselines[]
  saleslines         saleslines[]

  @@index([location_id], map: "idx_itemtransactions_location")
}

model transactionsstate {
  id               Int                @id @default(autoincrement())
  status           String
  itemtransactions itemtransactions[]
}

model itemtypes {
  id    Int     @id @default(autoincrement())
  name  String  @unique @db.VarChar
  items items[]
}

model feedtypes {
  id                Int              @id @default(autoincrement())
  name              String           @unique @db.VarChar
  feedconnection_id Int?
  feedconnections   feedconnections? @relation(fields: [feedconnection_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  items             items[]
}

model locations {
  id               Int                @id @default(autoincrement())
  location_type_id Int
  name             String             @unique @db.VarChar
  pool_id          Int?
  batch_generation batch_generation[]
  disposal_table   disposal_table[]
  itemtransactions itemtransactions[]
  locationtypes    locationtypes      @relation(fields: [location_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pools            pools?             @relation(fields: [pool_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  priority_history priority_history[]
  documents        documents[]        @relation("documentsTolocations")
}

model locationtypes {
  id          Int         @id @default(autoincrement())
  name        String      @unique @db.VarChar
  description String?
  locations   locations[]
}

model parameters {
  id               Int                @id @default(autoincrement())
  name             String             @unique @db.VarChar
  description      String?
  parametersvalues parametersvalues[]
}

model parametersvalues {
  id           BigInt     @id @default(autoincrement())
  parameter_id Int
  value        String
  date         DateTime   @default(now()) @db.Timestamp(6)
  parameters   parameters @relation(fields: [parameter_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model pools {
  id                      Int                       @id @default(autoincrement())
  prod_line_id            Int
  name                    String                    @unique @db.VarChar
  description             String?
  cleaning_frequency      Int?
  water_temperature       Float?
  x_location              Float?
  y_location              Float?
  pool_height             Float?
  pool_width              Float?
  pool_length             Float?
  locations               locations[]
  percent_feeding_history percent_feeding_history[]
  productionlines         productionlines           @relation(fields: [prod_line_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model productionareas {
  id              Int               @id @default(autoincrement())
  name            String            @unique @db.VarChar
  description     String?
  productionlines productionlines[]
}

model productionlines {
  id              Int              @id @default(autoincrement())
  prod_area_id    Int?
  name            String
  description     String?
  pools           pools[]
  productionareas productionareas? @relation(fields: [prod_area_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model purchaselines {
  id                  Int               @id @default(autoincrement())
  purchase_id         BigInt
  item_transaction_id BigInt?
  item_id             Int
  quantity            Float
  unit_id             Int
  items               items             @relation(fields: [item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  itemtransactions    itemtransactions? @relation(fields: [item_transaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  purchtable          purchtable        @relation(fields: [purchase_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  units               units             @relation(fields: [unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model purchtable {
  id                BigInt          @id @default(autoincrement())
  doc_id            BigInt?
  date_time         DateTime        @default(now()) @db.Timestamp(6)
  vendor_id         Int
  vendor_doc_number String          @db.VarChar
  purchaselines     purchaselines[]
  vendors           vendors         @relation(fields: [vendor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model salestable {
  id          BigInt       @id @default(autoincrement())
  doc_id      BigInt?
  date_time   DateTime     @default(now()) @db.Timestamp(6)
  customer_id Int
  saleslines  saleslines[]
  customers   customers    @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model saleslines {
  id                  Int               @id @default(autoincrement())
  salestable_id       BigInt
  item_transaction_id BigInt?
  item_id             Int
  quantity            Float
  unit_id             Int
  items               items             @relation(fields: [item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  itemtransactions    itemtransactions? @relation(fields: [item_transaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  salestable          salestable        @relation(fields: [salestable_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  units               units             @relation(fields: [unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model stocking {
  id                  Int       @id @default(autoincrement())
  doc_id              BigInt
  average_weight      Float
  form_average_weight Float?
  documents           documents @relation(fields: [doc_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model units {
  id               Int                @id @default(autoincrement())
  name             String             @unique @db.VarChar
  items            items[]
  itemtransactions itemtransactions[]
  purchaselines    purchaselines[]
  saleslines       saleslines[]
}

model vendors {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar
  description String?
  items       items[]
  purchtable  purchtable[]
}

model customers {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar
  description String?
  salestable  salestable[]
}

model datatable_below25 {
  id              Int   @id @default(autoincrement())
  day             Int
  feedingLevel    Float
  fc              Float
  weight          Float
  voerhoeveelheid Float
}

model datatable_over25 {
  id              Int   @id @default(autoincrement())
  day             Int
  av_weight       Float
  weight          Float
  uitval          Float
  voederconversie Float
  voederniveau    Float
}

model time_table {
  id   Int    @id @default(autoincrement())
  time String
}

model disposal_table {
  id          Int              @id @default(autoincrement())
  doc_id      BigInt
  reason_id   Int
  qty         Int
  batch_id    BigInt
  date        DateTime
  location_id Int
  itembatches itembatches      @relation(fields: [batch_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  documents   documents        @relation(fields: [doc_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  locations   locations        @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reasons     disposal_reasons @relation(fields: [reason_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model disposal_reasons {
  id             Int              @id @default(autoincrement())
  reason         String           @unique @db.VarChar
  disposal_table disposal_table[]
}

model cost_table {
  id                  Int               @id @default(autoincrement())
  date_time           DateTime          @default(now()) @db.Timestamp(6)
  cost                Float
  batch_generation_id BigInt?
  batch_generation    batch_generation? @relation(fields: [batch_generation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model batch_generation {
  id                     BigInt                   @id @default(autoincrement())
  location_id            Int
  initial_batch_id       BigInt?
  first_parent_id        BigInt?
  second_parent_id       BigInt?
  transaction_id         BigInt
  firstParent            batch_generation?        @relation("FirstParentRelation", fields: [first_parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  firstNextBatches       batch_generation[]       @relation("FirstParentRelation")
  itembatches            itembatches?             @relation(fields: [initial_batch_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  location               locations                @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  secondParent           batch_generation?        @relation("SecondParentRelation", fields: [second_parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  secondNextBatches      batch_generation[]       @relation("SecondParentRelation")
  itemtransactions       itemtransactions         @relation(fields: [transaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cost_record            cost_table[]
  generation_feed_amount generation_feed_amount[]
}

model generation_feed_amount {
  id                  BigInt           @id @default(autoincrement())
  batch_generation_id BigInt
  feed_batch_id       BigInt
  amount              Float
  doc_id              BigInt
  batch_generation    batch_generation @relation(fields: [batch_generation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  documents           documents        @relation(fields: [doc_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  feed_batches        itembatches      @relation(fields: [feed_batch_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model fetching {
  id               BigInt           @id @default(autoincrement())
  fetching_reason  String
  total_weight     Float
  tran_id          BigInt
  weekNumber       Int
  itemtransactions itemtransactions @relation(fields: [tran_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model User {
  id            String    @id
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model percent_feeding_history {
  id                                                      Int        @id @default(autoincrement())
  pool_id                                                 Int
  percent_feeding                                         Decimal
  valid_from                                              DateTime
  valid_to                                                DateTime?
  created_by                                              Int
  created_at                                              DateTime   @default(now())
  updated_by                                              Int?
  updated_at                                              DateTime?
  employees_percent_feeding_history_created_byToemployees employees  @relation("percent_feeding_history_created_byToemployees", fields: [created_by], references: [id])
  pools                                                   pools      @relation(fields: [pool_id], references: [id])
  employees_percent_feeding_history_updated_byToemployees employees? @relation("percent_feeding_history_updated_byToemployees", fields: [updated_by], references: [id])
}

model priority_history {
  id                                               Int        @id @default(autoincrement())
  location_id                                      Int
  item_id                                          Int
  priority                                         Int
  valid_from                                       DateTime
  valid_to                                         DateTime?
  created_by                                       Int
  created_at                                       DateTime   @default(now())
  updated_by                                       Int?
  updated_at                                       DateTime?
  employees_priority_history_created_byToemployees employees  @relation("priority_history_created_byToemployees", fields: [created_by], references: [id])
  items                                            items      @relation(fields: [item_id], references: [id])
  locations                                        locations  @relation(fields: [location_id], references: [id])
  employees_priority_history_updated_byToemployees employees? @relation("priority_history_updated_byToemployees", fields: [updated_by], references: [id])
}
